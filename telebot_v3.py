from aiogram import Bot, types
from aiogram import Dispatcher as dp
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor

bot = Bot(token='7047749443:AAF1JGuF0PItA5qpUGJYSHikUFoLlLZyJJw')
dp = dp(bot, storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ /info
@dp.message_handler(commands=['info'])
async def info_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /info –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.reply("–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤–∞–º.")

# –ö–æ–º–∞–Ω–¥–∞ /user_data
@dp.message_handler(commands=['user_data'])
async def user_data_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /user_data –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    user_id = message.from_user.id
    if user_id in user_data:
        await message.reply(f"–í–∞—à–µ –∏–º—è: {user_data[user_id]}")
    else:
        await message.reply("–Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /echo
@dp.message_handler(commands=['echo'])
async def echo_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /echo –∏ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.reply(message.text[6:])

# –ö–æ–º–∞–Ω–¥–∞ /remember_name
@dp.message_handler(commands=['remember_name'])
async def remember_name_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /remember_name –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    user_name = message.text[15:]
    user_data[user_id] = user_name
    await message.reply(f"–Ø –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—à–µ –∏–º—è: {user_name}")

# –ö–æ–º–∞–Ω–¥–∞ /dice
@dp.message_handler(commands=['dice'])
async def dice_command(message: types.Message):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /dice –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∫—É–±–∏–∫–∞.
    """
    dice_emoji = "üé≤"
    await message.reply(dice_emoji)

if __name__ == '__main__':
    executor.start_polling(dp)